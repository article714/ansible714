---
# TODO TODO TODO:
# penser à régler les soucis avec le bridge docker_container
#  Swagger:
#   ufw default allow routed
#   ufw route allow proto tcp from any to any port 8080
#   ufw  allow out proto tcp from any to any port 8080
#   ufw  allow proto tcp from any to any port 8080

- name: UFW -> reset Firewall rules
  ufw:
    state: reset
  when: reset_firewall

- name: UFW -> Init firewall TCP rules default deny
  ufw:
    default: deny
    direction: '{{ item }}'
  with_items:
    - 'outgoing'
    - 'incoming'

- name: UFW -> Init firewall TCP rules default deny (routed)
  ufw:
    default: deny
    direction: 'routed'
  with_items:
    - 'routed'
  when: routing_enabled|default(false)

- name: UFW -> allow outgoing forwarding when main_if is bridged
  ufw:
    default: allow
    direction: '{{ item }}'
    interface: '{{ main_network_if }}'
  with_items:
    - 'outgoing'
  when: main_if_is_bridged|default(false) and main_network_if != "any" and routing_enabled|default(false)

- name: UFW -> Init firewall rules -> DNS, NTP (allow out on all interfaces, any protocol)
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    direction: '{{ item.dir }}'
  with_items:
    - { 'port': '53', 'dir': 'out', 'rule': 'allow' }
    - { 'port': '123', 'dir': 'out', 'rule': 'allow' }

- name: UFW -> Init firewall TCP rules (SSH, http) --> Forward/routed
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: tcp
    interface: '{{ main_network_if }}'
    direction: '{{ item.dir }}'
    route: yes
  with_items:
    - { 'port': '{{ custom_ssh_port }}', 'dir': 'in', 'rule': 'allow' }
    - { 'port': '{{ custom_ssh_port }}', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'ssh', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'ssh', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'smtp', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'http', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'http', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'https', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'https', 'dir': 'out', 'rule': 'allow' }
  when: main_if_is_bridged|default(false) and main_network_if != "any"

- name: UFW -> Init firewall UDP rules (DNS, NTP) --> Forward/routed
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: udp
    interface: '{{ main_network_if }}'
    direction: '{{ item.dir }}'
    route: yes
  with_items:
    - { 'port': '53', 'dir': 'in', 'rule': 'allow' }
    - { 'port': '53', 'dir': 'out', 'rule': 'allow' }
    - { 'port': '123', 'dir': 'in', 'rule': 'allow' }
    - { 'port': '123', 'dir': 'out', 'rule': 'allow' }
    - { 'port': '5353', 'dir': 'in', 'rule': 'allow' }
    - { 'port': '5353', 'dir': 'out', 'rule': 'allow' }
  when: main_if_is_bridged|default(false) and main_network_if != "any"

- name: UFW -> Init firewall TCP rules (SSH, http) --> standards (specific IF)
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: tcp
    interface: '{{ main_network_if }}'
    direction: '{{ item.dir }}'
  with_items:
    - { 'port': '{{ custom_ssh_port }}', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'smtp', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'http', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'https', 'dir': 'out', 'rule': 'allow' }
  when: main_network_if != "any"

- name: UFW -> Init firewall TCP rules (SSH, http) --> standards (any IF)
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: tcp
    direction: '{{ item.dir }}'
  with_items:
    - { 'port': '{{ custom_ssh_port }}', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'smtp', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'http', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'https', 'dir': 'out', 'rule': 'allow' }
  when: main_network_if == "any"

- name: UFW -> Init firewall UDP rules --> standards
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: udp
    interface: '{{ main_network_if }}'
    direction: '{{ item.dir }}'
  with_items:
    - { 'port': '5353', 'dir': 'out', 'rule': 'allow' }

- name: UFW -> Init firewall TCP rules (SSH, http) --> standards (specific IF)
  ufw:
    rule: '{{ item.rule }}'
    port: '{{ item.port }}'
    proto: tcp
    interface: '{{ main_network_if }}'
    direction: '{{ item.dir }}'
  with_items:
    - { 'port': '{{ custom_ssh_port }}', 'dir': 'in', 'rule': 'allow' }
    - { 'port': 'ssh', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'smtp', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'http', 'dir': 'out', 'rule': 'allow' }
    - { 'port': 'https', 'dir': 'out', 'rule': 'allow' }
  when: main_network_if != "any"

- name: UFW -> Insert/Update "A714 rules" configuration footer 
  lineinfile:
    path: /etc/ufw/user.rules
    insertbefore: "^# don't delete the 'COMMIT' line or these rules won't be processed$"
    state: present
    line: '# END ANSIBLE-A714 MANAGED BLOCK'
  with_items: 
    - user.rules 
    - user6.rules

- name: UFW -> Insert/Update "A714 rules" configuration footer 
  lineinfile:
    path: /etc/ufw/user.rules
    insertbefore: '^#\ END\ ANSIBLE-A714\ MANAGED\ BLOCK$'
    regexp: '^#\ START\ ANSIBLE-A714\ MANAGED\ BLOCK$'
    state: present
    line: '# START ANSIBLE-A714 MANAGED BLOCK'
  with_items: 
    - user.rules 
    - user6.rules

- name: UFW -> Insert/Update "A714 rules" configuration block in /etc/ufw/user.rules
  lineinfile:
    path: /etc/ufw/user.rules
    insertbefore: '^#\ END\ ANSIBLE-A714\ MANAGED\ BLOCK$'
    state: present
    line: '{{ item }}'
  with_items: '{{ additional_fw_rules }}'

- name: UFW -> Insert/Update "A714 rules" configuration block in /etc/ufw/user6.rules
  lineinfile:
    path: /etc/ufw/user6.rules
    insertbefore: '^#\ END\ ANSIBLE-A714\ MANAGED\ BLOCK$'
    state: present
    line: '{{ item }}'
  with_items: '{{ additional_fw_rules6 }}'

- name: UFW -> Disable Firewall
  ufw:
    state: disabled

- name: UFW -> re-enable Firewall
  ufw:
    state: enabled
  when: enable_firewall|default(false)
